@{
    ViewData["Title"] = "Venta";
    int numPage = 1;
    int numRegistros = 0;
    int numRegistrosPorPage = 10;
    int[] tops = { 10, 20, 50, 100, 500, 1000, 10000, -1 };
    int topActual = Convert.ToInt32(ViewBag.Top);
    List<SysInventarioFacturacionAgro.EntidadesDeNegocio.Compra> compras = ViewBag.Compras as List<SysInventarioFacturacionAgro.EntidadesDeNegocio.Compra>;
    List<SysInventarioFacturacionAgro.EntidadesDeNegocio.Producto> productos = ViewBag.Producto as List<SysInventarioFacturacionAgro.EntidadesDeNegocio.Producto>;
    List<SysInventarioFacturacionAgro.EntidadesDeNegocio.DetallesCompra> detalleCompras = new List<SysInventarioFacturacionAgro.EntidadesDeNegocio.DetallesCompra>();
    ViewBag.Detalles = detalleCompras;

}
<style>


    h1 {
        display: inline-block;
        margin: 0;
    }

    #btncrear {
        background-color: #005626;
        color: white;
        border: none;
        padding: 8px 12px;
        margin-left: 40px; /* Ajusta el margen según tus necesidades */
        cursor: pointer;
    }

        #btncrear a {
            text-decoration: none;
            color: white;
        }

</style>

<h1>Creación de compras</h1>


<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal" data-bs-whatever="">
    <i class="fas fa-plus"></i>  Agregar Proveedor
</button>


<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <!-- Puedes cambiar 'modal-lg' por 'modal-sm' o personalizar el tamaño según tus necesidades -->
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">
                    Título del Modal
                </h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                </button>
            </div>
            <div class="modal-body">
                <!-- Contenido del cuerpo del modal -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-dark" data-bs-dismiss="modal"> Cerrar </button>

            </div>
        </div>
    </div>
</div>



<button type="button" class="btn btn-success" onclick="window.location.href='@Url.Action("Create" , "Producto")'">
    <i class="fas fa-plus"></i> Agregar Producto
</button>




<div class="row">

    <!-- Cuadro de búsqueda de productos... -->
    <div class="row mt-2">
        <div class="col-sm-6">
            <div class="card border-info">
                <h6 class="TextLitlle">Busca tus productos</h6>
                <div class="card-body p-2 card-venta">
                    <div class="FormContent">
                        <div class="row align-items-star">
                            <div class="col-md-20">
                                <div class="form-group">
                                    <label class="control-label"><i class="fa-solid fa-magnifying-glass" style="color: #000000;"></i> Buscar</label>
                                    <input type="text" id="txtBuscar" class="form-control" name="buscar" placeholder="Buscar producto" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Tabla donde aparecen los productos... -->
        <div class="col-sm-6">
            <div class="card border-info">
                <div class="table-container">
                    <table id="tablaBusqueda" class="tablaBusqueda">
                        <thead>
                            <tr>


                                <th>Cod</th>

                                <th>
                                    Nombre
                                </th>
                                <th>
                                    En Stock
                                </th>
                                <th>
                                    Descripcion
                                </th>

                                <th>
                                    Marca
                                </th>
                                <th>
                                    Proveedor
                                </th>
                                <th>
                                    Precio Compra
                                </th>
                                <th colspan="1">Agg</th>

                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in productos)
                            {
                                <tr data-page="@numPage">

                                    <td>
                                        @Html.DisplayFor(modelItem => item.Codigo)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Nombre)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.CantidadStock)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Descripcion)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Marca)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(productos => item.Proveedor.Nombre)
                                    </td>

                                    <td>
                                        @Html.DisplayFor(modelItem => item.PrecioCompra)
                                    </td>
                                    <td class="botonestabla">
                                        <button class="agregar-producto btn btn-sm btn-success btn-block"
                                            data-productoid="@item.IdProducto"
                                            data-codigo="@item.Codigo"
                                            data-nombre="@item.Nombre"
                                            data-descripcion="@item.Descripcion"
                                            data-stock="@item.CantidadStock"
                                            data-precio="@item.PrecioCompra">
                                            <i class="fa fa-plus" aria-hidden="true"></i>
                                        </button>
                                    </td>

                                </tr>
                                numRegistros++;
                                if (numRegistros == numRegistrosPorPage)
                                {
                                    numPage++;
                                    numRegistros = 0;
                                }
                            }
                            @{
                                if (numRegistros == 0)
                                {
                                    numPage--;
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

</div>



<hr class="Separation" />
<form asp-controller="DetallesCompra" asp-action="ProcesarCompra" method="post">
    <div class="row mt-3">
        <div class="col-sm-11">
            <div class="table-responsive-sm">

                <table id="tablaDetalleCompra" class="tablaDetalles">
                    <thead>
                        <tr>
                            <th></th>
                            <th>Cantidad</th>
                            <th>Producto</th>
                            <th>Descripcion</th>
                            <th>Precio Unidad</th>
                            <th>Importe Total</th>
                            <th colspan="1">Borrar</th>
                        </tr>
                    </thead>
                    <tbody>

                        @foreach (var item in detalleCompras)

                        {
                            <tr data-page="@numPage">
                                <td class="PrimeraColumnaBusqueda">
                                    @Html.DisplayFor(modelItem => item.IdProducto)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Cantidad)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Producto.Nombre)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Producto.Descripcion)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Producto.PrecioCompra)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.ValorTotal)
                                </td>

                                <td class="botonestabla">
                                    <button class="eliminar-producto btn btn-danger" data-id="@item.IdDetallesCompra">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </td>
                                <input type="hidden" id="detalleCompras" name="detalleCompras" />
                            </tr>
                            numRegistros++;
                            if (numRegistros == numRegistrosPorPage)
                            {
                                numPage++;
                                numRegistros = 0;
                            }
                        }
                        @{
                            if (numRegistros == 0)
                            {
                                numPage--;
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <br />
    <div class="ContentFormCustomer">
        <div class="card border-info">


            <div class="BarraSuperior">
                <button id="btnTerminarGuardarVenta" type="submit" class="BtnImprimir" onclick="return confirmarTerminarVenta()">
                    <i class="fa fa-print" aria-hidden="true"></i> Imprimir y Terminar Compra
                </button>

            </div>
            <div class="card-body p-2 card-venta">
                <div class="row align-items-star">
                    <div class="col-sm-4">
                        <div class="input-group input-group-sm mb-2">
                            <div class="input-group-prepend">
                                <label class="DataCustomer" for="inputGroupSelect01">Monto base</label>
                            </div>
                            <input id="txtigv" name="total" readonly type="text" class="form-control" value="0">
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="input-group input-group-sm mb-2">
                            <div class="input-group-prepend">
                                <label class="DataCustomer" for="inputGroupSelect01">IVA.</label>
                            </div>
                            <input id="txtiva" name="impuesto" readonly type="text" class="form-control" value="0">
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="input-group input-group-sm mb-2">
                            <div class="form-group">
                                <label class="DataCustomer" for="inputGroupSelect01">Total</label>
                            </div>
                            <input id="txttotal" name="totalpagado" readonly type="text" class="form-control" value="0">
                        </div>
                    </div>

                    <div class="col-sm-4">
                        <div class="input-group input-group-sm mb-2">
                            <div class="input-group-prepend">
                                <label class="DataCustomer" for="inputGroupSelect01">Pago Con:</label>
                            </div>
                            <input id="txtmontopago" type="text" class="form-control" autocomplete="off">
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="input-group input-group-sm mb-2">
                            <label class="DataCustomerFormaP" for="inputGroupSelect01">F. Pago</label>
                            <select name="FormaDePago" class="form-control">
                                <option selected value="1">EFECTIVO</option>
                                <option value="2">TARJETA</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <button id="btncalcular" type="button" class="btnCalcular">
                            <i class="fas fa-dollar-sign"></i> Calcular
                        </button>
                    </div>
                </div>
            </div>
            <br />

            <div class="col-sm-12">
                <div class="BarraInferio">
                    <div class="card-body p-2">
                        <div class="row">
                            <div class="col-sm-10">
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
</form>




<!-- Modal del ticket -->
<!-- Modal del ticket -->




<script>

    //Funcion de agregar al carrito y calcular
    document.addEventListener("DOMContentLoaded", function () {
        const agregarProductoButtons = document.querySelectorAll(".agregar-producto");
        const eliminarProductoButtons = document.querySelectorAll(".eliminar-producto");
        const txtsubtotal = document.getElementById("txtsubtotal");
        const txtigv = document.getElementById("txtigv");
        const txtiva = document.getElementById("txtiva");
        const txttotal = document.getElementById("txttotal");
        const txtmontopago = document.getElementById("txtmontopago");
        const btncalcular = document.getElementById("btncalcular");

        const detalleCompras = [];

        agregarProductoButtons.forEach(function (button) {
            button.addEventListener("click", function () {
                const productoid = button.getAttribute("data-productoid");
                const codigo = button.getAttribute("data-codigo");
                const nombre = button.getAttribute("data-nombre");
                const descripcion = button.getAttribute("data-descripcion");
                const precio = parseFloat(button.getAttribute("data-precio"));

                const cantidad = prompt(`Ingrese la cantidad para "${nombre}"`);
                if (cantidad !== null && !isNaN(cantidad) && cantidad > 0) {
                    agregarProducto(productoid, codigo, nombre, descripcion, parseFloat(cantidad), precio);
                }
            });
        });


        function agregarProducto(productoid, codigo, nombre, descripcion, cantidad, precio) {
            const importeTotal = parseFloat(cantidad) * precio;
            detalleCompras.push({
                productoid: productoid,
                codigo: codigo,
                nombre: nombre,
                descripcion: descripcion,
                cantidad: parseFloat(cantidad),
                precio: precio,
                importeTotal: importeTotal,
            });
            updateDetalleCompraTable();
            calculateTotal();
        }

        eliminarProductoButtons.forEach(function (button) {
            button.addEventListener("click", function () {
                const id = parseInt(button.getAttribute("data-id"));
                const index = detalleCompras.findIndex((detalle) => detalle.id === id);
                if (index !== -1) {
                    detalleCompras.splice(index, 1);
                    updateDetalleCompraTable();
                    calculateTotal();
                }
            });
        });
        // Modificar la función updateDetalleFacturaTable para agregar un botón de eliminar
        function updateDetalleCompraTable() {
            let indeceFila = -1;
            const tbody = document.querySelector("#tablaDetalleCompra tbody");
            while (tbody.firstChild) {
                tbody.removeChild(tbody.firstChild);
            }

            detalleCompras.forEach(function (detalle, index) {
                indeceFila++;
                const row = document.createElement("tr");
                row.innerHTML = `
                                            <td><input name='detalleCompras[${indeceFila}].IdProducto' value='${detalle.productoid}'  readonly="readonly" class="PrimeraColumna"/></td>
                                                 <td><input name='detalleCompras[${indeceFila}].Cantidad' value='${detalle.cantidad}'  readonly="readonly" class="SiguientesColumnas" /></td>
                                                 <td><input name='detalleCompras[${indeceFila}].Nombre' value='${detalle.nombre}'  readonly="readonly" class="SiguientesColumnas"/></td>
                                                 <td><input name='detalleCompras[${indeceFila}].Descripcion' value='${detalle.descripcion}'  readonly="readonly" class="SiguientesColumnas" /></td>
                                                <td><input name='detalleCompras[${indeceFila}].Precio' value='${detalle.precio}'  readonly="readonly" class="SiguientesColumnas"/></td>
                                                 <td><input name='detalleCompras[${indeceFila}].ValorTotal' value='${detalle.importeTotal}'  readonly="readonly" class="SiguientesColumnas" /></td>
                                            <td>
                                                <button class="eliminar-producto btn btn-danger" data-index="${index}">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </td>
                                        `;
                tbody.appendChild(row);
            });

            // Agrega un event listener para los botones de eliminar
            const eliminarProductoButtons = document.querySelectorAll(".eliminar-producto");
            eliminarProductoButtons.forEach(function (button) {
                button.addEventListener("click", function () {
                    const index = button.getAttribute("data-index");
                    removeProduct(index);
                });
            });
        }

        // Función para eliminar un producto
        function removeProduct(index) {
            if (index >= 0 && index < detalleCompras.length) {
                detalleCompras.splice(index, 1);
                updateDetalleCompraTable();
                calculateTotal();
            }
        }

        function calculateTotal() {
            let subtotal = 0;
            detalleCompras.forEach(function (detalle) {
                subtotal += detalle.importeTotal;
            });

            const igv = subtotal / 1.13 // IGV del 13%
            const iva = subtotal - igv
            const total = subtotal

            txtigv.value = igv.toFixed(2);
            txtiva.value = iva.toFixed(2);
            txttotal.value = total.toFixed(2);
        }
        btncalcular.addEventListener("click", function () {
            const montoPago = parseFloat(txtmontopago.value);
            if (isNaN(montoPago) || montoPago < 0) {
                alert("Ingrese un monto de pago válido.");
                return;
            }

            const subtotal = parseFloat(txtsubtotal.value);
            if (montoPago < subtotal) {
                alert("El monto de pago debe ser igual o mayor que el total.");
            } else {
                const cambio = montoPago - subtotal;
                alert(`Cambio: S/. ${cambio.toFixed(2)}`);
            }
        });
    });




    document.addEventListener("DOMContentLoaded", function () {
        const txtBuscar = document.getElementById("txtBuscar");
        const tablaBusqueda = document.querySelector("#tablaBusqueda tbody");

        txtBuscar.addEventListener("input", filterProductos);

        function filterProductos() {
            const buscarText = txtBuscar.value.trim().toLowerCase();

            const rows = tablaBusqueda.querySelectorAll("tr");
            rows.forEach((row) => {
                const codigoCell = row.querySelector("td:nth-child(1)");
                const nombreCell = row.querySelector("td:nth-child(2)");
                if (codigoCell && nombreCell) {
                    const codigoText = codigoCell.textContent.toLowerCase();
                    const nombreText = nombreCell.textContent.toLowerCase();

                    if (codigoText.includes(buscarText) || nombreText.includes(buscarText)) {
                        row.style.display = "";
                    } else {
                        row.style.display = "none";
                    }
                }
            });
        }
    });

    //funcion de filtar


    $(document).ready(function () {
        // Maneja el evento de entrada de texto
        $("#inputProducto").keyup(function () {
            var textoBusqueda = $(this).val().toLowerCase();

            // Filtra los productos que coinciden con el texto de búsqueda
            var productosFiltrados = productos.filter(function (producto) {

                return producto.toLowerCase().includes(textoBusqueda);
            });

            // Actualiza la lista desplegable con los resultados de la búsqueda
            var selectProducto = $("#selectProducto");
            selectProducto.empty();
            console.log("filtrando...");
            // Agrega las opciones de productos encontrados
            productosFiltrados.forEach(function (producto) {
                selectProducto.append(new Option(producto, producto));
            });

            // Muestra u oculta la lista desplegable según si hay resultados
            if (productosFiltrados.length > 0) {
                selectProducto.show();
            } else {
                selectProducto.hide();
            }
            console.log(productosFiltrados);
        });

        // Maneja el evento de selección en la lista desplegable
        $("#selectProducto").change(function () {
            var seleccionado = $(this).val();
            // Puedes hacer algo con el producto seleccionado, como asignarlo a un campo oculto o procesarlo de alguna manera.
            console.log("Producto seleccionado:", seleccionado);
        });
    });

    function confirmarTerminarVenta() {
        var respuesta = confirm("¿Seguro que desea terminar la venta y guardarla?");

        return respuesta;
    }




    var exampleModal = document.getElementById('exampleModal');
    exampleModal.addEventListener('show.bs.modal', function (event) {
        var button = event.relatedTarget;
        var recipient = button.getAttribute('data-bs-whatever');

        $.get('/Proveedor/Create', function (data) {
            var modalTitle = exampleModal.querySelector('.modal-title');
            modalTitle.textContent = 'Proveedor' + recipient;

            var modalBody = exampleModal.querySelector('.modal-body');
            modalBody.innerHTML = data;
        });
    });




</script>
<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>